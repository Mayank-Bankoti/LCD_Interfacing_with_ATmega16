
LCD_AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  000001b2  00000246  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800076  00800076  0000025c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000028c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000846  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000063d  00000000  00000000  00000b46  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000030d  00000000  00000000  00001183  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  00001490  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000370  00000000  00000000  000014f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001bd  00000000  00000000  00001864  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001a21  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 eb       	ldi	r30, 0xB2	; 178
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e7       	ldi	r26, 0x76	; 118
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 37       	cpi	r26, 0x78	; 120
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 82 00 	call	0x104	; 0x104 <main>
  8a:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_cmd>:
	LCD_cmd(0x0E); // Display on cursor on
}

void LCD_cmd(unsigned char Command)
{
	Dataout = Command;
  92:	82 bb       	out	0x12, r24	; 18
	ctrl = (0<<RS)|(0<<RW)|(1<<EN); // RS=0 for instruction/command
  94:	84 e0       	ldi	r24, 0x04	; 4
  96:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	8f ec       	ldi	r24, 0xCF	; 207
  9a:	97 e0       	ldi	r25, 0x07	; 7
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <LCD_cmd+0xa>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <LCD_cmd+0x10>
  a2:	00 00       	nop
	_delay_ms(1);
	ctrl = (0<<RS)| (0<< RW)|(0<<EN);
  a4:	15 ba       	out	0x15, r1	; 21
  a6:	9f e7       	ldi	r25, 0x7F	; 127
  a8:	28 e3       	ldi	r18, 0x38	; 56
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	91 50       	subi	r25, 0x01	; 1
  ae:	20 40       	sbci	r18, 0x00	; 0
  b0:	80 40       	sbci	r24, 0x00	; 0
  b2:	e1 f7       	brne	.-8      	; 0xac <LCD_cmd+0x1a>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <LCD_cmd+0x24>
  b6:	00 00       	nop
  b8:	08 95       	ret

000000ba <LCD_init>:
	}
}

void LCD_init(void)
{
	LCD_cmd(0x38); // 8bit mode
  ba:	88 e3       	ldi	r24, 0x38	; 56
  bc:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmd>
	LCD_cmd(0x06); // Entry mode
  c0:	86 e0       	ldi	r24, 0x06	; 6
  c2:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmd>
	LCD_cmd(0x01);  // Clear Display
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmd>
	LCD_cmd(0x80); // 1st row and 1st position
  cc:	80 e8       	ldi	r24, 0x80	; 128
  ce:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmd>
	LCD_cmd(0x0E); // Display on cursor on
  d2:	8e e0       	ldi	r24, 0x0E	; 14
  d4:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmd>
  d8:	08 95       	ret

000000da <LCD_data>:
	_delay_ms(50);
}

void LCD_data(unsigned char Data)
{
	Dataout = Data;
  da:	82 bb       	out	0x12, r24	; 18
	ctrl= (1<<RS)| (0<<RW)| (1<<EN);  // RS=1 for data
  dc:	85 e0       	ldi	r24, 0x05	; 5
  de:	85 bb       	out	0x15, r24	; 21
  e0:	8f ec       	ldi	r24, 0xCF	; 207
  e2:	97 e0       	ldi	r25, 0x07	; 7
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <LCD_data+0xa>
  e8:	00 c0       	rjmp	.+0      	; 0xea <LCD_data+0x10>
  ea:	00 00       	nop
	_delay_ms(1);
	ctrl = (1<<RS | (0<<RW)|(0<<EN));
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	85 bb       	out	0x15, r24	; 21
  f0:	9f e7       	ldi	r25, 0x7F	; 127
  f2:	28 e3       	ldi	r18, 0x38	; 56
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	91 50       	subi	r25, 0x01	; 1
  f8:	20 40       	sbci	r18, 0x00	; 0
  fa:	80 40       	sbci	r24, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <LCD_data+0x1c>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <LCD_data+0x26>
 100:	00 00       	nop
 102:	08 95       	ret

00000104 <main>:
void LCD_data(unsigned char Data);
unsigned char i;
unsigned char j;

int main(void)
{
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	cd b7       	in	r28, 0x3d	; 61
 10a:	de b7       	in	r29, 0x3e	; 62
 10c:	65 97       	sbiw	r28, 0x15	; 21
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	f8 94       	cli
 112:	de bf       	out	0x3e, r29	; 62
 114:	0f be       	out	0x3f, r0	; 63
 116:	cd bf       	out	0x3d, r28	; 61
	char string[] ="Hello Mayank";
 118:	8d e0       	ldi	r24, 0x0D	; 13
 11a:	e0 e6       	ldi	r30, 0x60	; 96
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	de 01       	movw	r26, r28
 120:	11 96       	adiw	r26, 0x01	; 1
 122:	01 90       	ld	r0, Z+
 124:	0d 92       	st	X+, r0
 126:	8a 95       	dec	r24
 128:	e1 f7       	brne	.-8      	; 0x122 <main+0x1e>
	char string1[] ="Welcome";
 12a:	88 e0       	ldi	r24, 0x08	; 8
 12c:	ed e6       	ldi	r30, 0x6D	; 109
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	de 01       	movw	r26, r28
 132:	1e 96       	adiw	r26, 0x0e	; 14
 134:	01 90       	ld	r0, Z+
 136:	0d 92       	st	X+, r0
 138:	8a 95       	dec	r24
 13a:	e1 f7       	brne	.-8      	; 0x134 <main+0x30>
	DDRD=0xFF;
 13c:	8f ef       	ldi	r24, 0xFF	; 255
 13e:	81 bb       	out	0x11, r24	; 17
	DDRC =0xFF;
 140:	84 bb       	out	0x14, r24	; 20
	LCD_init();
 142:	0e 94 5d 00 	call	0xba	; 0xba <LCD_init>
	while(string[i]!='\0')
 146:	07 c0       	rjmp	.+14     	; 0x156 <main+0x52>
	{
		LCD_data(string[i]);
 148:	0e 94 6d 00 	call	0xda	; 0xda <LCD_data>
		i++;
 14c:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <i>
 150:	8f 5f       	subi	r24, 0xFF	; 255
 152:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <i>
	char string[] ="Hello Mayank";
	char string1[] ="Welcome";
	DDRD=0xFF;
	DDRC =0xFF;
	LCD_init();
	while(string[i]!='\0')
 156:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <i>
 15a:	e1 e0       	ldi	r30, 0x01	; 1
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	ec 0f       	add	r30, r28
 160:	fd 1f       	adc	r31, r29
 162:	e8 0f       	add	r30, r24
 164:	f1 1d       	adc	r31, r1
 166:	80 81       	ld	r24, Z
 168:	81 11       	cpse	r24, r1
 16a:	ee cf       	rjmp	.-36     	; 0x148 <main+0x44>
	{
		LCD_data(string[i]);
		i++;
	}
	LCD_cmd(0xC0);
 16c:	80 ec       	ldi	r24, 0xC0	; 192
 16e:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmd>
	while(string1[j]!='\0')
 172:	07 c0       	rjmp	.+14     	; 0x182 <main+0x7e>
	{
		LCD_data(string1[j]);
 174:	0e 94 6d 00 	call	0xda	; 0xda <LCD_data>
		j++;
 178:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
 17c:	8f 5f       	subi	r24, 0xFF	; 255
 17e:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end>
	{
		LCD_data(string[i]);
		i++;
	}
	LCD_cmd(0xC0);
	while(string1[j]!='\0')
 182:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
 186:	ee e0       	ldi	r30, 0x0E	; 14
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	ec 0f       	add	r30, r28
 18c:	fd 1f       	adc	r31, r29
 18e:	e8 0f       	add	r30, r24
 190:	f1 1d       	adc	r31, r1
 192:	80 81       	ld	r24, Z
 194:	81 11       	cpse	r24, r1
 196:	ee cf       	rjmp	.-36     	; 0x174 <main+0x70>
	{
		LCD_data(string1[j]);
		j++;
	}
}
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	65 96       	adiw	r28, 0x15	; 21
 19e:	0f b6       	in	r0, 0x3f	; 63
 1a0:	f8 94       	cli
 1a2:	de bf       	out	0x3e, r29	; 62
 1a4:	0f be       	out	0x3f, r0	; 63
 1a6:	cd bf       	out	0x3d, r28	; 61
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
 1ac:	08 95       	ret

000001ae <_exit>:
 1ae:	f8 94       	cli

000001b0 <__stop_program>:
 1b0:	ff cf       	rjmp	.-2      	; 0x1b0 <__stop_program>
